package com.mars.distribution.daoimpl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.mars.HibernateUtility.HibernateUtil;
import com.mars.distribution.ServicePojo.JacksonChannelDetails;
import com.mars.distribution.ServicePojo.JacksonInterm;
import com.mars.distribution.config.DistributionConstants;
import com.mars.distribution.dao.ChannelDao;
import com.mars.distribution.map.RegionGeomJdbc;
import com.mars.distribution.model.Channel;
import com.mars.distribution.model.Districts;
import com.mars.distribution.model.Intermediary;
import com.mars.distribution.model.Region;
import com.mars.util.MarsUtil;

public class ChannelDaoImpl implements ChannelDao {

	Session session = null;
	
	String CLASS_NAME = this.getClass().getName();
	Logger logger = Logger.getLogger(CLASS_NAME);

	public ChannelDaoImpl() {
		logger.info("Entering " + CLASS_NAME);
	}

	
	public List getChannelOnKey() {

		try {
			
		} catch(Exception e ) {
			
		} finally {
			
		}
		return null;
	}


	public List<Channel> getChannelNames() {

		SessionFactory sf = HibernateUtil.getSessionFactory();
		List<Channel> channels = new ArrayList<Channel>();
		try {
			session = sf.openSession();
			
			Query channelQuery = session.createQuery("from Channel where orgId='"+DistributionConstants.DEFAULT_ORGID+"'");
			channels = channelQuery.list();
			
			return channels;
			
		} catch(Exception e ) {
			e.printStackTrace();
		} finally {
			try {
				if(session.isOpen()) {
					session.close();
				}
			} catch(Exception e ) {
				e.printStackTrace();
			} 
		}
		return null;
	}
	
	public List<LinkedHashMap> getChannelIntermOnKey(String channelId, String orgId) {
		
		SessionFactory sf = HibernateUtil.getSessionFactory();
		List<Channel> channels = new ArrayList<Channel>();
		
		Collection<Intermediary> channelCollec = new ArrayList<Intermediary>(); 
		List<LinkedHashMap> channelDetails = new ArrayList<LinkedHashMap>();
		
		LinkedHashMap<String, String> channelhm = new LinkedHashMap<String, String>();
		
		try {
			session = sf.openSession();
			
			Query channelQuery = session.createQuery("from Channel where orgId='"+orgId.trim()+"' and channelId='"+channelId.trim()+"' and status=1");
			channels = channelQuery.list();
			
			if(channels.size() > 0) {
				for(Channel channel : channels) {
					
					
				/*	channelCollec = channel.getIntermCollection();
				*/
					channelCollec=filterCollection(channel.getIntermCollection(),session);
				//	channelhm.put(channel.getChannelId(), channel.getChannelId());
					channelhm.put(channel.getChannelId(), channel.getChannelName());
				}
				
				LinkedHashMap<String, Integer> hm = new LinkedHashMap<String, Integer>();
				traverseChildren(channelCollec, hm);
				
				channelDetails.add(channelhm);
				channelDetails.add(hm);
			}
			return channelDetails;
			
		} catch(Exception e ) {
			
		} finally {
			
		}
		return null;
	}
	
	private Collection<Intermediary> filterCollection(Collection<Intermediary> collection, Session s) {
		Query filterQuery = s.createFilter(collection, "where status=1");
		return filterQuery.list();
	}
	
	public Collection<Intermediary> traverseChildren(Collection<Intermediary> collection,HashMap<String, Integer> hm) {
		
		for(Intermediary inter:collection) {
			//System.out.println(inter.getName());
			hm.put(inter.getType(), inter.getLevel());
			traverseChildren(inter.getIntermediaryCollection(),hm);
		}
		return null;
	}
	public String saveChannelData(JacksonChannelDetails channelDetails){
		SessionFactory sf = HibernateUtil.getSessionFactory();
		List intermediaries=new ArrayList();
		Map<Integer,String> levelType=new TreeMap<Integer,String>();
		Intermediary intermed=null;
		Intermediary intermediary1 = null;
		try{
			
			MarsUtil marsUtil = new MarsUtil();
			String channelId = MarsUtil.getIdGenerated(DistributionConstants.CHANNEL_ID, DistributionConstants.CHANNEL_SEQUENCE);
			String user=DistributionConstants.DEFAULT_USER;
			String orgId=DistributionConstants.CREATED_ORGID;
			int levelCount=channelDetails.getLevelCount();
			//intermediaries=(List)channelDetails.getInterMediaryType();
			for(JacksonInterm intmes:channelDetails.getInterMediaryType()){
				levelType.put(intmes.getLevel(), intmes.getType());
			}
			Intermediary intermediary2 = null;
			Intermediary intermediary3 = null;
			
			for(Map.Entry<Integer,String> entry : levelType.entrySet()) {
				  Integer key = entry.getKey();
				  String value = entry.getValue();
				  
				if(key == 1) {
				  String intmId = marsUtil.getIdGenerated(DistributionConstants.INTERM_ID, DistributionConstants.INTERM_SEQUENCE);
				  intermediary1 = new Intermediary();
				  intermediary1.setLevel(key);
				  intermediary1.setType(value);
				  intermediary1.setStatus(DistributionConstants.ONE);
				  intermediary1.setIntermId(intmId);
				  intermediary3 = intermediary1;
				  
				} else if(key != 1) {
					intermediary2 = new Intermediary();
					String intmId = marsUtil.getIdGenerated(DistributionConstants.INTERM_ID, DistributionConstants.INTERM_SEQUENCE);
					
					intermediary2.setLevel(key);
					intermediary2.setType(value);
					 intermediary2.setStatus(DistributionConstants.ONE);
					intermediary2.setIntermId(intmId);
					intermediary1.getIntermediaryCollection().add(intermediary2);
					intermediary1 = intermediary2;
				}
				  
				}
			intermediary1 = intermediary3;
			
			session = sf.openSession();
			session.beginTransaction();			
			Channel channel = new Channel();
			channel.setChannelName(channelDetails.getChannelName());
			channel.setChannelId(channelId);
			channel.setCreatedBy(user);
			channel.setCreatedOn(new java.util.Date());
			channel.setLevelCount(channelDetails.getLevelCount());
			channel.setOrgId(orgId);
			channel.setStatus(DistributionConstants.ONE);
			channel.getIntermCollection().add(intermediary1);
			session.save(channel);
			session.getTransaction().commit();

			
			return channelId;
		}catch(HibernateException e){
			e.printStackTrace();
		}finally{
			if(session.isOpen()) {
				session.close();
			}
		}
		return null;
	}
	public static void main(String args[]) {
		
		ChannelDaoImpl channelDaoImpl = new ChannelDaoImpl();
		channelDaoImpl.getChannelIntermOnKey("CH7", "D1");
	}
}
