package com.mars.distribution.ServiceClass;

import java.nio.channels.Channels;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;

import org.apache.log4j.Logger;

import com.mars.distrbution.service.bl.ChannelBL;
import com.mars.distribution.ServicePojo.ChannelJson;
import com.mars.distribution.ServicePojo.ChannelStructureJson;

@Path("/ChannelService")
@Produces({"application/json","application/xml"})
public class ChannelService {
	
	String CLASS_NAME = this.getClass().getName();
    Logger logger = Logger.getLogger(CLASS_NAME);
	
    private ChannelBL channelBl = new ChannelBL();
	
	public ChannelBL getChannelBl() {
		return channelBl;
	}
	public void setChannelBl(ChannelBL channelBl) {
		this.channelBl = channelBl;
	}
	
	@GET
	@Path("/channel/list")
	@Produces({"application/json"})
	public ChannelJson getChannelList() {
	
		try {
			ChannelJson channelJson = new ChannelJson();
			channelJson.setChannelJsonCollection(getChannelBl().getChannels());
		
			if (channelJson == null) {
				ResponseBuilder builder = Response.status(Status.BAD_REQUEST);
				builder.type("application/json");
				builder.entity("<error>No channels Found</error>");
				throw new WebApplicationException(builder.build());
			} else {
				return channelJson;
			}
		} catch(Exception e) {
			e.printStackTrace();
			logger.fatal(e.getMessage());
		}
		return null;
	}
	
	@GET
	@Path("/channel/struct/{channelId}/{orgId}")
	@Produces({"application/json"})
	public ChannelStructureJson getChannelStruct(@PathParam("channelId") String channelId, @PathParam("orgId") String orgId ) {
	
		try {
			ChannelStructureJson channelJson = getChannelBl().getChannelStructure(channelId, orgId);
		
			if (channelJson == null) {
				ResponseBuilder builder = Response.status(Status.BAD_REQUEST);
				builder.type("application/json");
				builder.entity("<error>No channels Found</error>");
				throw new WebApplicationException(builder.build());
			} else {
				return channelJson;
			}
		} catch(Exception e) {
			e.printStackTrace();
			logger.fatal(e.getMessage());
		}
		return null;
	}
}
